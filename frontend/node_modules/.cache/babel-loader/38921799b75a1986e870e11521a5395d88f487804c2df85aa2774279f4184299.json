{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\"; // ✅ Import axios\n\n// const Addtocart = () => {\n//   const [cart, setCart] = useState([]);\n//   const [orderPlace, setOrderPlace] = useState(false);\n//   const [cartCount, setCartCount] = useState(0);\n//   const [deliveryType, setDeliveryType] = useState(\"Normal\");\n//   const [address, setAddress] = useState(\"\");\n//   const [city, setCity] = useState(\"\");\n//   const [pincode, setPincode] = useState(\"\");\n//   const [step, setStep] = useState(0);\n//   const [finalAmount, setFinalAmount] = useState(0);\n//   const navigate = useNavigate();\n\n//   const email = localStorage.getItem(\"email\") || \"guest\";\n\n//   useEffect(() => {\n//     const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\n//     setCart(storedCart);\n//     setCartCount(storedCart.length);\n//   }, [email]);\n\n//   const updateCart = (updatedCart) => {\n//     setCart(updatedCart);\n//     setCartCount(updatedCart.length);\n//     localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\n//     localStorage.setItem(\"cartcount\", updatedCart.length);\n//     window.dispatchEvent(new Event(\"storage\"));\n//   };\n\n//   const handleIncreaseQuantity = (index) => {\n//     const updatedCart = cart.map((item, i) =>\n//       i === index ? { ...item, quantity: item.quantity + 1 } : item\n//     );\n//     updateCart(updatedCart);\n//   };\n\n//   const handleDecreaseQuantity = (index) => {\n//     const updatedCart = cart\n//       .map((item, i) =>\n//         i === index && item.quantity > 1\n//           ? { ...item, quantity: item.quantity - 1 }\n//           : item\n//       )\n//       .filter((item) => item.quantity > 0);\n\n//     updateCart(updatedCart);\n//   };\n\n//   const handleRemoveItem = (index) => {\n//     const updatedCart = cart.filter((_, i) => i !== index);\n//     updateCart(updatedCart);\n//   };\n\n//   const totalAmount = cart\n//     .reduce((total, item) => total + item.price * item.quantity, 0)\n//     .toFixed(2);\n\n//   const extraCharge = deliveryType === \"Fast\" ? 50 : 0;\n//   const totalAmountWithDelivery = parseFloat(totalAmount) + extraCharge;\n\n//   const getServiceDate = () => {\n//     const date = new Date();\n//     date.setDate(date.getDate() + (deliveryType === \"Fast\" ? 1 : 3));\n//     return date;\n//   };\n\n//   const handlePlaceOrder = async () => {\n//     const userId = localStorage.getItem(\"USER\");\n\n//     if (!userId || cart.length === 0) {\n//       alert(\"Invalid order data. Please log in and add items.\");\n//       return;\n//     }\n\n//     if (!address.trim() || !city.trim() || !pincode.trim() || !deliveryType) {\n//       alert(\"Please fill all delivery details (address, city, pincode, delivery type).\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/api/order\", {\n//         userId,\n//         cartItems: cart,\n//         totalAmount: totalAmountWithDelivery,\n//         pincode,\n//         address,\n//         city,\n//         serviceDate: getServiceDate(),\n//         deliveryType,\n//         userEmail: email,\n//       });\n\n//       const orderData = response.data.order;\n\n//       if (response.status === 201 && orderData._id) {\n//         const options = {\n//           key: \"rzp_test_99IwqPHWTFKkXS\",\n//           amount: parseFloat(totalAmountWithDelivery) * 100,\n//           currency: \"INR\",\n//           name: \"Softwizz\",\n//           description: \"Order Payment\",\n//           handler: async function (razorpayResponse) {\n//             try {\n//               const paymentRes = await axios.put(\n//                 `http://localhost:5000/api/updatepayment/${orderData._id}`,\n//                 {\n//                   paymentId: razorpayResponse.razorpay_payment_id,\n//                   paymentStatus: \"Paid\",\n//                 }\n//               );\n\n//               if (paymentRes.status === 200) {\n//                 alert(\"Payment Successful!\");\n//                 localStorage.removeItem(`cart_${email}`);\n//                 localStorage.setItem(\"cartcount\", 0);\n//                 setCart([]);\n//                 setCartCount(0);\n//                 setOrderPlace(true);\n//                 window.dispatchEvent(new Event(\"storage\"));\n//                 navigate(\"/\");\n//               } else {\n//                 alert(\"Payment captured but failed to update order.\");\n//               }\n//             } catch (err) {\n//               console.error(\"Payment update failed:\", err);\n//               alert(\"Payment succeeded but order update failed.\");\n//             }\n//           },\n//           prefill: {\n//             name: address,\n//             email: email,\n//             contact: \"9999999999\",\n//           },\n//           theme: {\n//             color: \"#3399cc\",\n//           },\n//         };\n\n//         const rzp = new window.Razorpay(options);\n//         rzp.open();\n//       } else {\n//         alert(\"Failed to create order. Try again.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Order placement error:\", error);\n//       alert(\"Something went wrong. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"addtocart-container py-5\" style={{ padding: \"20px\" }}>\n//       {/* Internal CSS */}\n//       <style>{`\n//         .checkout-steps {\n//           display: flex;\n//           justify-content: space-between;\n//           margin-bottom: 30px;\n//           flex-wrap: wrap;\n//         }\n//         .step {\n//           text-align: center;\n//           flex: 1;\n//           position: relative;\n//           padding: 10px;\n//           min-width: 80px;\n//         }\n//         .step::after {\n//           content: '';\n//           position: absolute;\n//           top: 20px;\n//           right: -50%;\n//           width: 100%;\n//           height: 4px;\n//           background-color: #ddd;\n//           z-index: 0;\n//         }\n//         .step:last-child::after {\n//           display: none;\n//         }\n//         .step-circle {\n//           width: 40px;\n//           height: 40px;\n//           margin: 0 auto;\n//           line-height: 40px;\n//           border-radius: 50%;\n//           font-weight: bold;\n//           color: white;\n//           background-color: #ccc;\n//           z-index: 1;\n//           position: relative;\n//           transition: all 0.3s ease;\n//         }\n//         .step-label {\n//           margin-top: 10px;\n//           font-weight: 500;\n//           font-size: 14px;\n//         }\n//         .step.active .step-circle {\n//           background-color: #007bff;\n//           box-shadow: 0 0 10px rgba(0, 123, 255, 0.6);\n//         }\n//         .step.completed .step-circle {\n//           background-color: #28a745;\n//           box-shadow: 0 0 10px rgba(40, 167, 69, 0.6);\n//         }\n//         @media (max-width: 768px) {\n//           .step {\n//             flex: none;\n//             width: 25%;\n//           }\n//           .step-label {\n//             font-size: 12px;\n//           }\n//         }\n//       `}</style>\n\n//       {/* Step Indicators */}\n//       <div className=\"checkout-steps\">\n//         {[\"Cart\", \"Address\", \"Payment\", \"Summary\"].map((label, idx) => (\n//           <div\n//             key={idx}\n//             className={`step ${step === idx ? \"active\" : step > idx ? \"completed\" : \"\"}`}\n//           >\n//             <div className=\"step-circle\">{idx + 1}</div>\n//             <div className=\"step-label\">{label}</div>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Step 0 - Cart */}\n//       {step === 0 && (\n//         <div className=\"row\">\n//           <div className=\"col-md-8\">\n//             <h4>Your Cart</h4>\n//             <div className=\"row\">\n//               {cart.map((item, index) => (\n//                 <div key={index} className=\"col-md-6 mb-4\">\n//                   <div className=\"card cart-card shadow-sm\">\n//                     <img\n//                       src={item.image}\n//                       className=\"card-img-top\"\n//                       style={{ height: \"180px\", objectFit: \"cover\" }}\n//                       alt={item.name}\n//                     />\n//                     <div className=\"card-body\">\n//                       <h5 className=\"card-title\">{item.name}</h5>\n//                       <p className=\"card-text\">\n//   ₹{item.price} × {item.quantity} = ₹{item.price * item.quantity}\n// </p>\n\n//                       <div className=\"d-flex justify-content-between\">\n//                         <button\n//                           className=\"btn btn-success btn-sm\"\n//                           onClick={() => handleIncreaseQuantity(index)}\n//                         >\n//                           +\n//                         </button>\n//                         <button\n//                           className=\"btn btn-warning btn-sm text-white\"\n//                           onClick={() => handleDecreaseQuantity(index)}\n//                         >\n//                           -\n//                         </button>\n//                         <button\n//                           className=\"btn btn-danger btn-sm\"\n//                           onClick={() => handleRemoveItem(index)}\n//                         >\n//                           Remove\n//                         </button>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           <div className=\"col-md-4\">\n//             <div className=\"card p-3 shadow\">\n//               <h5>Order Summary</h5>\n//               <ul className=\"list-group list-group-flush\">\n//                 {cart.map((item, idx) => (\n//                   <li key={idx} className=\"list-group-item d-flex justify-content-between\">\n//                     <span>{item.name} × {item.quantity}</span>\n\n//                     <span>₹{item.price}</span>\n//                   </li>\n//                 ))}\n//                 <li className=\"list-group-item fw-bold d-flex justify-content-between border-top\">\n//                   <span>Total</span>\n//                   <span>₹{totalAmount}</span>\n//                 </li>\n//               </ul>\n//               <button\n//                 className=\"btn btn-primary mt-3 w-100\"\n//                 disabled={cart.length === 0}\n//                 onClick={() => setStep(1)}\n//               >\n//                 Continue\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Step 1 - Address */}\n//       {step === 1 && (\n//         <div className=\"row justify-content-center\">\n//           <div className=\"col-md-6\">\n//             <h4>Delivery Address</h4>\n//             <input\n//               className=\"form-control my-2\"\n//               placeholder=\"Address\"\n//               value={address}\n//               onChange={(e) => setAddress(e.target.value)}\n//             />\n//             <input\n//               className=\"form-control my-2\"\n//               placeholder=\"City\"\n//               value={city}\n//               onChange={(e) => setCity(e.target.value)}\n//             />\n//             <input\n//               className=\"form-control my-2\"\n//               placeholder=\"Pincode\"\n//               value={pincode}\n//               onChange={(e) => setPincode(e.target.value)}\n//             />\n//             <select\n//               className=\"form-control my-2\"\n//               value={deliveryType}\n//               onChange={(e) => setDeliveryType(e.target.value)}\n//             >\n//               <option value=\"\">Select Delivery Type</option>\n//               <option value=\"Fast\">Fast (₹50, 1 Days)</option>\n//               <option value=\"Slow\">Normal (Free, 3 Days)</option>\n//             </select>\n\n//             <button\n//               className=\"btn btn-primary w-100\"\n//               onClick={() => {\n//                 if (address && city && pincode && deliveryType) {\n//                   setStep(2);\n//                 } else {\n//                   alert(\"Please fill all fields!\");\n//                 }\n//               }}\n//             >\n//               Continue to Payment\n//             </button> \n\n//             <button className=\"btn btn-secondary w-100 mt-2\" onClick={() => setStep(0)}>\n//               Back to Cart\n//             </button>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Step 2 - Payment */}\n//       {step === 2 && (\n//         <div className=\"text-center\">\n//           <h4>Payment</h4>\n//           <p>Simulated payment method (Cash/UPI etc)</p>\n//           <button\n//   className=\"btn btn-dark\"\n//   onClick={() => {\n//     const extraCharge = deliveryType === \"Fast\" ? 50 : 0;\n//     setFinalAmount(parseFloat(totalAmount) + extraCharge); // 👈 Add this\n//     setStep(3);\n//   }}\n// >\n//   Continue to Summary\n// </button>\n\n//           <br />\n//           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(1)}>\n//             Back to Address\n//           </button>\n//         </div>\n//       )}\n\n//       {/* Step 3 - Summary */}\n//       {step === 3 && (\n//         <div className=\"text-center\">\n//           <h4>Order Summary</h4>\n//           <p>Total: ₹{finalAmount}</p>\n//           <button className=\"btn btn-success\" onClick={handlePlaceOrder}>\n//             Place Order\n//           </button>\n//           <br />\n//           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(2)}>\n//             Back to Payment\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }  \n\n// export default Addtocart;","map":{"version":3,"names":[],"sources":["C:/Users/satyam/Desktop/FinalProject/frontend/src/components/ViewAddtocart.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\"; // ✅ Import axios\r\n\r\n// const Addtocart = () => {\r\n//   const [cart, setCart] = useState([]);\r\n//   const [orderPlace, setOrderPlace] = useState(false);\r\n//   const [cartCount, setCartCount] = useState(0);\r\n//   const [deliveryType, setDeliveryType] = useState(\"Normal\");\r\n//   const [address, setAddress] = useState(\"\");\r\n//   const [city, setCity] = useState(\"\");\r\n//   const [pincode, setPincode] = useState(\"\");\r\n//   const [step, setStep] = useState(0);\r\n//   const [finalAmount, setFinalAmount] = useState(0);\r\n//   const navigate = useNavigate();\r\n\r\n//   const email = localStorage.getItem(\"email\") || \"guest\";\r\n\r\n//   useEffect(() => {\r\n//     const storedCart = JSON.parse(localStorage.getItem(`cart_${email}`)) || [];\r\n//     setCart(storedCart);\r\n//     setCartCount(storedCart.length);\r\n//   }, [email]);\r\n\r\n//   const updateCart = (updatedCart) => {\r\n//     setCart(updatedCart);\r\n//     setCartCount(updatedCart.length);\r\n//     localStorage.setItem(`cart_${email}`, JSON.stringify(updatedCart));\r\n//     localStorage.setItem(\"cartcount\", updatedCart.length);\r\n//     window.dispatchEvent(new Event(\"storage\"));\r\n//   };\r\n\r\n//   const handleIncreaseQuantity = (index) => {\r\n//     const updatedCart = cart.map((item, i) =>\r\n//       i === index ? { ...item, quantity: item.quantity + 1 } : item\r\n//     );\r\n//     updateCart(updatedCart);\r\n//   };\r\n\r\n//   const handleDecreaseQuantity = (index) => {\r\n//     const updatedCart = cart\r\n//       .map((item, i) =>\r\n//         i === index && item.quantity > 1\r\n//           ? { ...item, quantity: item.quantity - 1 }\r\n//           : item\r\n//       )\r\n//       .filter((item) => item.quantity > 0);\r\n\r\n//     updateCart(updatedCart);\r\n//   };\r\n\r\n//   const handleRemoveItem = (index) => {\r\n//     const updatedCart = cart.filter((_, i) => i !== index);\r\n//     updateCart(updatedCart);\r\n//   };\r\n\r\n//   const totalAmount = cart\r\n//     .reduce((total, item) => total + item.price * item.quantity, 0)\r\n//     .toFixed(2);\r\n\r\n//   const extraCharge = deliveryType === \"Fast\" ? 50 : 0;\r\n//   const totalAmountWithDelivery = parseFloat(totalAmount) + extraCharge;\r\n\r\n//   const getServiceDate = () => {\r\n//     const date = new Date();\r\n//     date.setDate(date.getDate() + (deliveryType === \"Fast\" ? 1 : 3));\r\n//     return date;\r\n//   };\r\n\r\n//   const handlePlaceOrder = async () => {\r\n//     const userId = localStorage.getItem(\"USER\");\r\n\r\n//     if (!userId || cart.length === 0) {\r\n//       alert(\"Invalid order data. Please log in and add items.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!address.trim() || !city.trim() || !pincode.trim() || !deliveryType) {\r\n//       alert(\"Please fill all delivery details (address, city, pincode, delivery type).\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:5000/api/order\", {\r\n//         userId,\r\n//         cartItems: cart,\r\n//         totalAmount: totalAmountWithDelivery,\r\n//         pincode,\r\n//         address,\r\n//         city,\r\n//         serviceDate: getServiceDate(),\r\n//         deliveryType,\r\n//         userEmail: email,\r\n//       });\r\n\r\n//       const orderData = response.data.order;\r\n\r\n//       if (response.status === 201 && orderData._id) {\r\n//         const options = {\r\n//           key: \"rzp_test_99IwqPHWTFKkXS\",\r\n//           amount: parseFloat(totalAmountWithDelivery) * 100,\r\n//           currency: \"INR\",\r\n//           name: \"Softwizz\",\r\n//           description: \"Order Payment\",\r\n//           handler: async function (razorpayResponse) {\r\n//             try {\r\n//               const paymentRes = await axios.put(\r\n//                 `http://localhost:5000/api/updatepayment/${orderData._id}`,\r\n//                 {\r\n//                   paymentId: razorpayResponse.razorpay_payment_id,\r\n//                   paymentStatus: \"Paid\",\r\n//                 }\r\n//               );\r\n\r\n//               if (paymentRes.status === 200) {\r\n//                 alert(\"Payment Successful!\");\r\n//                 localStorage.removeItem(`cart_${email}`);\r\n//                 localStorage.setItem(\"cartcount\", 0);\r\n//                 setCart([]);\r\n//                 setCartCount(0);\r\n//                 setOrderPlace(true);\r\n//                 window.dispatchEvent(new Event(\"storage\"));\r\n//                 navigate(\"/\");\r\n//               } else {\r\n//                 alert(\"Payment captured but failed to update order.\");\r\n//               }\r\n//             } catch (err) {\r\n//               console.error(\"Payment update failed:\", err);\r\n//               alert(\"Payment succeeded but order update failed.\");\r\n//             }\r\n//           },\r\n//           prefill: {\r\n//             name: address,\r\n//             email: email,\r\n//             contact: \"9999999999\",\r\n//           },\r\n//           theme: {\r\n//             color: \"#3399cc\",\r\n//           },\r\n//         };\r\n\r\n//         const rzp = new window.Razorpay(options);\r\n//         rzp.open();\r\n//       } else {\r\n//         alert(\"Failed to create order. Try again.\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Order placement error:\", error);\r\n//       alert(\"Something went wrong. Please try again.\");\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <div className=\"addtocart-container py-5\" style={{ padding: \"20px\" }}>\r\n//       {/* Internal CSS */}\r\n//       <style>{`\r\n//         .checkout-steps {\r\n//           display: flex;\r\n//           justify-content: space-between;\r\n//           margin-bottom: 30px;\r\n//           flex-wrap: wrap;\r\n//         }\r\n//         .step {\r\n//           text-align: center;\r\n//           flex: 1;\r\n//           position: relative;\r\n//           padding: 10px;\r\n//           min-width: 80px;\r\n//         }\r\n//         .step::after {\r\n//           content: '';\r\n//           position: absolute;\r\n//           top: 20px;\r\n//           right: -50%;\r\n//           width: 100%;\r\n//           height: 4px;\r\n//           background-color: #ddd;\r\n//           z-index: 0;\r\n//         }\r\n//         .step:last-child::after {\r\n//           display: none;\r\n//         }\r\n//         .step-circle {\r\n//           width: 40px;\r\n//           height: 40px;\r\n//           margin: 0 auto;\r\n//           line-height: 40px;\r\n//           border-radius: 50%;\r\n//           font-weight: bold;\r\n//           color: white;\r\n//           background-color: #ccc;\r\n//           z-index: 1;\r\n//           position: relative;\r\n//           transition: all 0.3s ease;\r\n//         }\r\n//         .step-label {\r\n//           margin-top: 10px;\r\n//           font-weight: 500;\r\n//           font-size: 14px;\r\n//         }\r\n//         .step.active .step-circle {\r\n//           background-color: #007bff;\r\n//           box-shadow: 0 0 10px rgba(0, 123, 255, 0.6);\r\n//         }\r\n//         .step.completed .step-circle {\r\n//           background-color: #28a745;\r\n//           box-shadow: 0 0 10px rgba(40, 167, 69, 0.6);\r\n//         }\r\n//         @media (max-width: 768px) {\r\n//           .step {\r\n//             flex: none;\r\n//             width: 25%;\r\n//           }\r\n//           .step-label {\r\n//             font-size: 12px;\r\n//           }\r\n//         }\r\n//       `}</style>\r\n  \r\n//       {/* Step Indicators */}\r\n//       <div className=\"checkout-steps\">\r\n//         {[\"Cart\", \"Address\", \"Payment\", \"Summary\"].map((label, idx) => (\r\n//           <div\r\n//             key={idx}\r\n//             className={`step ${step === idx ? \"active\" : step > idx ? \"completed\" : \"\"}`}\r\n//           >\r\n//             <div className=\"step-circle\">{idx + 1}</div>\r\n//             <div className=\"step-label\">{label}</div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n  \r\n//       {/* Step 0 - Cart */}\r\n//       {step === 0 && (\r\n//         <div className=\"row\">\r\n//           <div className=\"col-md-8\">\r\n//             <h4>Your Cart</h4>\r\n//             <div className=\"row\">\r\n//               {cart.map((item, index) => (\r\n//                 <div key={index} className=\"col-md-6 mb-4\">\r\n//                   <div className=\"card cart-card shadow-sm\">\r\n//                     <img\r\n//                       src={item.image}\r\n//                       className=\"card-img-top\"\r\n//                       style={{ height: \"180px\", objectFit: \"cover\" }}\r\n//                       alt={item.name}\r\n//                     />\r\n//                     <div className=\"card-body\">\r\n//                       <h5 className=\"card-title\">{item.name}</h5>\r\n//                       <p className=\"card-text\">\r\n//   ₹{item.price} × {item.quantity} = ₹{item.price * item.quantity}\r\n// </p>\r\n\r\n \r\n//                       <div className=\"d-flex justify-content-between\">\r\n//                         <button\r\n//                           className=\"btn btn-success btn-sm\"\r\n//                           onClick={() => handleIncreaseQuantity(index)}\r\n//                         >\r\n//                           +\r\n//                         </button>\r\n//                         <button\r\n//                           className=\"btn btn-warning btn-sm text-white\"\r\n//                           onClick={() => handleDecreaseQuantity(index)}\r\n//                         >\r\n//                           -\r\n//                         </button>\r\n//                         <button\r\n//                           className=\"btn btn-danger btn-sm\"\r\n//                           onClick={() => handleRemoveItem(index)}\r\n//                         >\r\n//                           Remove\r\n//                         </button>\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n  \r\n//           <div className=\"col-md-4\">\r\n//             <div className=\"card p-3 shadow\">\r\n//               <h5>Order Summary</h5>\r\n//               <ul className=\"list-group list-group-flush\">\r\n//                 {cart.map((item, idx) => (\r\n//                   <li key={idx} className=\"list-group-item d-flex justify-content-between\">\r\n//                     <span>{item.name} × {item.quantity}</span>\r\n                    \r\n\r\n\r\n\r\n//                     <span>₹{item.price}</span>\r\n//                   </li>\r\n//                 ))}\r\n//                 <li className=\"list-group-item fw-bold d-flex justify-content-between border-top\">\r\n//                   <span>Total</span>\r\n//                   <span>₹{totalAmount}</span>\r\n//                 </li>\r\n//               </ul>\r\n//               <button\r\n//                 className=\"btn btn-primary mt-3 w-100\"\r\n//                 disabled={cart.length === 0}\r\n//                 onClick={() => setStep(1)}\r\n//               >\r\n//                 Continue\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n  \r\n//       {/* Step 1 - Address */}\r\n//       {step === 1 && (\r\n//         <div className=\"row justify-content-center\">\r\n//           <div className=\"col-md-6\">\r\n//             <h4>Delivery Address</h4>\r\n//             <input\r\n//               className=\"form-control my-2\"\r\n//               placeholder=\"Address\"\r\n//               value={address}\r\n//               onChange={(e) => setAddress(e.target.value)}\r\n//             />\r\n//             <input\r\n//               className=\"form-control my-2\"\r\n//               placeholder=\"City\"\r\n//               value={city}\r\n//               onChange={(e) => setCity(e.target.value)}\r\n//             />\r\n//             <input\r\n//               className=\"form-control my-2\"\r\n//               placeholder=\"Pincode\"\r\n//               value={pincode}\r\n//               onChange={(e) => setPincode(e.target.value)}\r\n//             />\r\n//             <select\r\n//               className=\"form-control my-2\"\r\n//               value={deliveryType}\r\n//               onChange={(e) => setDeliveryType(e.target.value)}\r\n//             >\r\n//               <option value=\"\">Select Delivery Type</option>\r\n//               <option value=\"Fast\">Fast (₹50, 1 Days)</option>\r\n//               <option value=\"Slow\">Normal (Free, 3 Days)</option>\r\n//             </select>\r\n  \r\n//             <button\r\n//               className=\"btn btn-primary w-100\"\r\n//               onClick={() => {\r\n//                 if (address && city && pincode && deliveryType) {\r\n//                   setStep(2);\r\n//                 } else {\r\n//                   alert(\"Please fill all fields!\");\r\n//                 }\r\n//               }}\r\n//             >\r\n//               Continue to Payment\r\n//             </button> \r\n  \r\n//             <button className=\"btn btn-secondary w-100 mt-2\" onClick={() => setStep(0)}>\r\n//               Back to Cart\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n  \r\n//       {/* Step 2 - Payment */}\r\n//       {step === 2 && (\r\n//         <div className=\"text-center\">\r\n//           <h4>Payment</h4>\r\n//           <p>Simulated payment method (Cash/UPI etc)</p>\r\n//           <button\r\n//   className=\"btn btn-dark\"\r\n//   onClick={() => {\r\n//     const extraCharge = deliveryType === \"Fast\" ? 50 : 0;\r\n//     setFinalAmount(parseFloat(totalAmount) + extraCharge); // 👈 Add this\r\n//     setStep(3);\r\n//   }}\r\n// >\r\n//   Continue to Summary\r\n// </button>\r\n\r\n//           <br />\r\n//           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(1)}>\r\n//             Back to Address\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n  \r\n//       {/* Step 3 - Summary */}\r\n//       {step === 3 && (\r\n//         <div className=\"text-center\">\r\n//           <h4>Order Summary</h4>\r\n//           <p>Total: ₹{finalAmount}</p>\r\n//           <button className=\"btn btn-success\" onClick={handlePlaceOrder}>\r\n//             Place Order\r\n//           </button>\r\n//           <br />\r\n//           <button className=\"btn btn-secondary mt-2\" onClick={() => setStep(2)}>\r\n//             Back to Payment\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }  \r\n\r\n// export default Addtocart;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}